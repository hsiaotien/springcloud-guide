server:
  port: 8082

spring:
  application:
    name: consumer-demo-0303

###################robbin######################
# 重试机制的开启, 默认的也是true, 所以可以不写.  但要写重试的策略
  cloud:
    loadbalancer:
      retry:
        enabled: true


user-service:
  ribbon:
    ConnectTimeout: 250 # Ribbon的连接超时时间
    ReadTimeout: 1000 # Ribbon的数据读取超时时间
    OkToRetryOnAllOperations: true # 是否对所有操作都进行重试
    MaxAutoRetriesNextServer: 1 # 切换实例的重试次数
    MaxAutoRetries: 1 # 对当前实例的重试次数
  # 负载均衡的rule策略
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule

################eureka################
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:10086/eureka
      # 当服务消费者启动是，会检测eureka.client.fetch-registry=true参数的值，
      # 如果为true，则会从Eureka Server服务的列表中读备份，然后缓存在本地。
      # 并且每隔5秒会重新获取并更新数据
    registry-fetch-interval-seconds: 5
  instance:
    prefer-ip-address: true
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port}
    # 当其他服务获取地址时,获取的是ip,而不是hostname
    # 这里指定了自己的ip信息,不指定会自己寻找
    lease-renewal-interval-in-seconds: 5 # 笔记中未配置续约周期. 我认为每一个在开发时,每一个服务都应该配置
    lease-expiration-duration-in-seconds: 10

################logger##############

logging:
  level:
    org.springframework: debug
    com.dev: debug

#############hystrix#############
# 重试机制没有生效,重试机制没有被触发，而是先触发了熔断。
# 所以，Ribbon的超时时间一定要小于Hystix的超时时间。
# 熔断效果可以把这个时间调小就可以看到熔断，或者两个时间相等，超时就会直接熔断。
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 6000

#设置熔断时间一般要比重试策略的读取超时的时间要长， 这样才能让重试生效， 极端超时才熔断降级，这才是熔断的意义。






